class Club
types

	public String_= seq of char;
	public String1 = seq1 of char;
	
instance variables

	private name: String_:= "";
	private newsletter: [String1];

	private clients: set of Client := {};
	private salesRepresentatives: set of SalesRepresentative := {};
	private trainers: set of Trainer := {};
	private groups: map String1 to Group := {|->};
	
	private crm: CRM;
	private clubOwner: Owner;
	
operations

	/**
	 * Club constructor
	 */
 	public Club: String_ * Owner ==> Club
 	Club(newName, owner) == 
	(
 		name := newName;
 		clubOwner := owner;
 		clubOwner.setClub(self);
 		crm := new CRM();
 		return self
	)
	pre len newName > 0
 	post 
 		name = newName and
 		newsletter = nil and
 		clients = {} and
 		salesRepresentatives = {} and
 		trainers = {} and
 		groups = {|->} and
 		clubOwner = owner;
 	
 		/**
		  * Add a new client to the club
		  */
		public addClient: Client ==> ()
		addClient(client) == 
		(
			clients := clients union {client};
			-- if client not in set PerfectGym`getInstance().getUsers() then
				-- PerfectGym`getInstance().addUser(client);
			client.setClub(self);
		)
		pre client not in set clients
		post clients = clients~ union {client};
		
		/**
		 * Add a new trainer to the club
		 */
		public addTrainer: Trainer ==> ()
		addTrainer(trainer) == 
		(
			trainers := trainers union {trainer};
			-- if trainer not in set PerfectGym`getInstance().getUsers() then
				-- PerfectGym`getInstance().addUser(trainer);
			trainer.setClub(self);
		)
		pre trainer not in set trainers
		post trainers = trainers~ union {trainer};
		
		/**
		 * Add a new sales representative to the club
		 */
		public addSalesRepresentative: SalesRepresentative ==> ()
		addSalesRepresentative(salesRepresentative) == 
		(
			salesRepresentatives := salesRepresentatives union {salesRepresentative};
			-- if salesRepresentative not in set PerfectGym`getInstance().getUsers() then
				-- PerfectGym`getInstance().addUser(salesRepresentative);
			salesRepresentative.setClub(self);
		)
		pre salesRepresentative not in set salesRepresentatives
		post salesRepresentatives = salesRepresentatives~ union {salesRepresentative};
		
		/**
		 * Add a new group (already with at least one client) to the club
		 */
		public addGroup: String1 * Group ==> ()
		addGroup(newName, newGroup) == 
				groups := groups munion {newName |-> newGroup}
		pre newName not in set dom groups
		post groups = groups~ munion {newName |-> newGroup};
		
		/**
		 * Add a new group, by giving its name and its first client, to the club
		 */
		public addEmptyGroupByName: String1 * Client ==> ()
		addEmptyGroupByName(newName, client) == 
				groups := groups munion {newName |-> new Group(client, self)}
		pre newName not in set dom groups and client in set clients
		post groups = groups~ munion {newName |-> groups(newName)}; -- VERIFICAR SE ISTO E VALIDO!!!
		
		/**
		 * Add a client of personal training to a trainer
		 */
		public addPersonalTraining: Trainer * Client ==> ()
		addPersonalTraining(trainer, client) ==
		(
			trainer.addTrainee(client);
			client.addTrainer(trainer);
		)
		pre 
			trainer in set trainers and
			client in set clients and
			client not in set trainer.getTrainees();
			
		/**
		 * Add newsletter to the club
		 */
		public addNewsletter: String1 ==> ()
		addNewsletter(message) == newsletter := message
		post newsletter = message;
		
		/**
		 * Send message to a client as club owner
		 */
		public sendMessageClient: String1 * Client ==> ()
		sendMessageClient(msg, receiver) == 
		(
			receiver.receiveMessage(msg, clubOwner);
			if newsletter <> nil then
				receiver.receiveMessage(newsletter, clubOwner);
		)
		pre receiver in set clients;
		
		/**
		 * Send message to an employee as club owner
		 */
		public sendMessageEmployee: String1 * Employee ==> ()
		sendMessageEmployee(msg, receiver) == receiver.receiveMessage(msg, clubOwner)
		pre (receiver in set trainers or receiver in set salesRepresentatives);
		
		/**
		 * Send message to all clients as club owner
		 */
		public sendMessageAllClients: String1 ==> ()
		sendMessageAllClients(msg) == 
		(
			for all client in set clients do
				sendMessageClient(msg, client);
		)
		pre card clients > 0;
				
		/**
		 * Send message to all trainers
		 */
		public sendMessageAllTrainers: String1 ==> ()
		sendMessageAllTrainers(msg) == 
		(
			for all trainer in set trainers do
				trainer.receiveMessage(msg, clubOwner)		
		)
		pre card trainers > 0 ;
		
		/**
		 * Send message to all sales representatives
		 */
		public sendMessageAllSalesRepresentatives: String1 ==> ()
		sendMessageAllSalesRepresentatives(msg) == 
		(
			for all salesRepresentative in set salesRepresentatives do
				salesRepresentative.receiveMessage(msg, clubOwner)		
		)
		pre card salesRepresentatives > 0;
		
		/**
		 * Send message to a group
		 */
		public sendMessageToGroup: String1 * String1 * User ==> ()
		sendMessageToGroup(msg, groupName, user) == groups(groupName).sendMessage(user, msg)
		pre groupName in set dom groups and (user in set clients or user = clubOwner);
		
		/**
		 * Send offer to a group
		 */
		public sendOfferToGroup : String1 * String1 ==> ()
		sendOfferToGroup(offer, groupName) == groups(groupName).sendOffer(offer)
		pre groupName in set dom groups;

		-- GETTERS
		
		/**
		 * Gets the club name
		 * 
		 * @return name
		 */
		public pure getName : () ==> String_
		getName() == return name
		post RESULT = name;
		
		/**
		 * Gets the club owner
		 * 
		 * @return clubOwner
		 */
		public pure getOwner : () ==> User
		getOwner() == return clubOwner
		post RESULT = clubOwner;
		
		/**
		 * Gets the club clients
		 * 
		 * @return set of Client
		 */
		public pure getClients : () ==> set of Client
		getClients() == return clients
		post RESULT = clients;
		
		/**
		 * Gets the club trainers
		 * 
		 * @return set of Trainer
		 */
		public pure getTrainers : () ==> set of Trainer
		getTrainers() == return trainers
		post RESULT = trainers;
		
		/**
		 * Gets the club sales representatives
		 * 
		 * @return set of SalesRepresentative
		 */
		public pure getSalesRepresentatives : () ==> set of SalesRepresentative
		getSalesRepresentatives() == return salesRepresentatives
		post RESULT = salesRepresentatives;
		
		/**
		 * Gets the club users (clients + trainers + salesRepresentatives)
		 * 
		 * @return set of User
		 */
		public pure getUsers : () ==> set of User
		getUsers() == return clients union trainers union salesRepresentatives
		post RESULT = clients union trainers union salesRepresentatives;
		
		/**
		 * Gets the club groups
		 * 
		 * @return map String1 to Group
		 */
		public pure getGroups : () ==> map String1 to Group
		getGroups() == return groups
		post RESULT = groups;
		
		/**
		 * Gets a club group by name
		 * 
		 * @return Group
		 */
		public pure getGroupByName : String1 ==> Group
		getGroupByName(groupName) == return groups(groupName)
		post RESULT = groups(groupName);
 	
end Club