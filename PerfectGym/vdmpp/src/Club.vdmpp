class Club
types

	public String_= seq of char;
	public String1 = seq1 of char;
	public Access = <Owner> | <Employee> | <User>;
	public Date = DateAndHour`Date;
	public Hour= DateAndHour`Hour;
	
instance variables

	private name: String_:= "";
	private newsletter: [String1];

	private clients: set of Client := {};
	private salesRepresentatives: set of SalesRepresentative := {};
	private trainers: set of Trainer := {};
	private groups: map String1 to Group := {|->};
	private classes: set of GymClass := {};
	private trainingSessions: set of TrainingSession := {};

	private invoices: set of Invoice := {};
	private products: set of Product := {};

	private fee: rat;
	
	private crm: CRM;
	private clubOwner: Owner;
	
operations

	/**
	 * Club constructor
	 */
 	public Club: String_ * Owner * rat ==> Club
 	Club(newName, owner, newFee) == 
	(
		newsletter := nil;
 		name := newName;
 		clubOwner := owner;
 		clubOwner.setClub(self);
		crm := new CRM(self);
		fee := newFee;
 		return self
	)
	pre newName <> "" and newFee > 0
 	post 
 		name = newName and
 		newsletter = nil and
 		clients = {} and
 		salesRepresentatives = {} and
 		trainers = {} and
 		groups = {|->} and
 		clubOwner = owner and
		classes = {} and
		fee = newFee and 
		invoices = {} and
		products = {} and
		trainingSessions = {};
 	
 		/**
		  * Add a new client to the club
		  */
		public addClient: Client * User ==> ()
		addClient(client, user) == 
		(
			clients := clients union {client};
			-- if client not in set PerfectGym`getInstance().getUsers() then
				-- PerfectGym`getInstance().addUser(client);
			client.setClub(self);
		)
		pre client not in set clients and (isAtLeastEmployee(user))
		post clients = clients~ union {client};
		
		/**
		 * Add a new trainer to the club
		 */
		public addTrainer: Trainer * User ==> ()
		addTrainer(trainer, user) == 
		(
			trainers := trainers union {trainer};
			-- if trainer not in set PerfectGym`getInstance().getUsers() then
				-- PerfectGym`getInstance().addUser(trainer);
			trainer.setClub(self);
		)
		pre trainer not in set trainers and isOwner(user)
		post trainers = trainers~ union {trainer};
		
		/**
		 * Add a new sales representative to the club
		 */
		public addSalesRepresentative: SalesRepresentative * User ==> ()
		addSalesRepresentative(salesRepresentative, user) == 
		(
			salesRepresentatives := salesRepresentatives union {salesRepresentative};
			-- if salesRepresentative not in set PerfectGym`getInstance().getUsers() then
				-- PerfectGym`getInstance().addUser(salesRepresentative);
			salesRepresentative.setClub(self);
		)
		pre salesRepresentative not in set salesRepresentatives and isOwner(user)
		post salesRepresentatives = salesRepresentatives~ union {salesRepresentative};
		
		/**
		 * Add a new group, by giving its name and its first client, to the club
		 */
		public addGroup: String1 * Client * User ==> ()
		addGroup(newName, client, user) == 
				groups := groups munion {newName |-> new Group(client, self)}
		pre newName <> "" and newName not in set dom groups and client in set clients and (isAtLeastEmployee(user))
		post groups = groups~ munion {newName |-> groups(newName)};
		
		/**
		 * Add a client of personal training to a trainer
		 */
		public addPersonalTraining: Trainer * Client * rat * User ==> ()
		addPersonalTraining(trainer, client, fee, user) ==
		(
			trainer.addTrainee(client);
			client.addTrainer(trainer, fee);
		)
		pre 
			trainer in set trainers and
			client in set clients and
			client not in set trainer.getTrainees()
			and (isAtLeastEmployee(user));
			
		public addGymClass: GymClass * User ==> ()
		addGymClass(gymClass, user) == 
		(
			classes := classes union {gymClass};
			gymClass.getTrainer().addTask(gymClass);
			gymClass.getTrainer().addGymClass(gymClass);
			for all attendee in set gymClass.getAttendees() do
				attendee.addGymClass(gymClass);
		)
		pre (isAtLeastEmployee(user))
		post classes = classes~ union {gymClass};

		public addTrainingSession: TrainingSession * User ==> ()
		addTrainingSession(trainingSession, user) == 
		(
			trainingSessions := trainingSessions union {trainingSession};
			trainingSession.getTrainer().addTask(trainingSession);
			trainingSession.getTrainer().addTrainingSession(trainingSession);
			trainingSession.getTrainee().addTrainingSession(trainingSession);
		)
		pre (isAtLeastEmployee(user))
		post trainingSessions = trainingSessions~ union {trainingSession};


		public setUserAccess: User * User * Access ==> ()
		setUserAccess(user, targetUser, access) == targetUser.setAccess(access)
		pre
			isOwner(user) and 
			targetUser.getAccess() <> <Owner> and
			user in set getUsers() and 
			targetUser in set getUsers();
		
		/**
		 * Add newsletter to the club
		 */
		public addNewsletter: String1 * User==> ()
		addNewsletter(message, user) == newsletter := message
		pre isOwner(user);
				
		/**
		 * Send message to a client as club owner
		 */
		public sendMessageClient: String1 * Client * User ==> ()
		sendMessageClient(msg, receiver, user) == 
		(
			receiver.receiveMessage(msg, user);
			if newsletter <> nil then
				receiver.receiveMessage(newsletter, user);
		)
		pre receiver in set clients and isOwner(user);
		
		/**
		 * Send message to an employee as club owner
		 */
		public sendMessageEmployee: String1 * Employee * User ==> ()
		sendMessageEmployee(msg, receiver, user) == receiver.receiveMessage(msg, user)
		pre receiver in set getEmployees() and isOwner(user);
		
		/**
		 * Send message to all clients as club owner
		 */
		public sendMessageAllClients: String1 * User==> ()
		sendMessageAllClients(msg, user) == 
		(
			for all client in set clients do
				sendMessageClient(msg, client, user);
		)
		pre card clients > 0 and isOwner(user);
				
		/**
		 * Send message to all trainers as club owner
		 */
		public sendMessageAllTrainers: String1 * User ==> ()
		sendMessageAllTrainers(msg, user) == 
		(
			for all trainer in set trainers do
				trainer.receiveMessage(msg, user)		
		)
		pre card trainers > 0 and isOwner(user);
		
		/**
		 * Send message to all sales representatives
		 */
		public sendMessageAllSalesRepresentatives: String1 * User ==> ()
		sendMessageAllSalesRepresentatives(msg, user) == 
		(
			for all salesRepresentative in set salesRepresentatives do
				salesRepresentative.receiveMessage(msg, user)		
		)
		pre card salesRepresentatives > 0 and isOwner(user);
		
		-- GROUPS
		
		/**
		 * Send message to a group
		 */
		public sendMessageToGroup: String1 * String1 * User ==> ()
		sendMessageToGroup(msg, groupName, user) == groups(groupName).sendMessage(user, msg)
		pre groupName in set dom groups and (user in set clients or isOwner(user));
		
		/**
		 * Send offer to a group
		 */
		public sendOfferToGroup : String1 * String1 * User ==> ()
		sendOfferToGroup(offer, groupName, user) == groups(groupName).sendOffer(offer)
		pre groupName in set dom groups and (isAtLeastEmployee(user));
		
		/**
		 * Add client to a group
		 */
	 	public addGroupClient: String1 * Client * User ==> ()
	 	addGroupClient(groupName, client, user) == groups(groupName).addClient(client)
	 	pre client in set clients and groupName in set dom groups and isOwner(user);
 
  	/**
		 * Remove client from a group
		 */
	 	public removeGroupClient: String1 * Client * User ==> ()
	 	removeGroupClient(groupName, client, user) == groups(groupName).removeClient(client)
		 pre client in set clients and groupName in set dom groups and isOwner(user);
		 
		-- INVOICE

		public addInvoice: Client * set of Payment * Date * Hour * String1 * User ==> ()
		addInvoice(client, payments, date, hour, type, user)==
		(
			invoices := invoices union {new Invoice(self, payments, date, hour, type, false, client)};
		)
		pre isAtLeastEmployee(user) and card payments >= 1 and not exists p1, p2 in set payments & p1.getClient() <> p2.getClient();

		public addInvoiceWithAllActivePayments: Client * Date * Hour * String1 * User ==> ()
		addInvoiceWithAllActivePayments(client, date, hour, type, user)==
		(
			invoices := invoices union {new Invoice(self, client.getPaymentsOfGivenType(type), date, hour, type, true, client)};
		)
		pre isAtLeastEmployee(user);


		public addPaymentToInvoice: Invoice * set of Payment * User==> ()
		addPaymentToInvoice(invoice, payments, user) == invoice.addPayment(payments)
		pre isAtLeastEmployee(user);


		public removePaymentFromInvoice: Invoice * set of Payment * User==> ()
		removePaymentFromInvoice(invoice, payments, user) == invoice.removePayment(payments)
		pre isAtLeastEmployee(user);
	 
	 	-- CRM
	 
  		/**
		 * Add a lead to the crm without attributing sales representative
		 */
		public addLeadToCRM: Lead * User==> ()
		addLeadToCRM(lead, user) == crm.addLead(lead)
		pre isAtLeastEmployee(user);

		/**
		 * Add a lead to the crm attrubting sales representative
		 */
		public addLeadToCRM: Lead * SalesRepresentative * User ==> ()
		addLeadToCRM(lead, sr, user) == crm.addLeadWithSR(lead, sr)
		pre sr in set salesRepresentatives and isAtLeastEmployee(user);

		/**
		 * Attribute a sales representative to a lead
		 */
		public setCRMLeadSR: Lead * SalesRepresentative * User ==> ()
		setCRMLeadSR(lead, sr, user) == crm.setLeadSR(lead, sr)
		pre sr in set salesRepresentatives and isAtLeastEmployee(user);
		
		/**
		 * Remove a lead from  a sales representative
		 */
		public removeLeadSR: Lead * SalesRepresentative * User ==> ()
		removeLeadSR(lead, sr, user) == sr.removeLead(lead)
		pre sr in set salesRepresentatives and isAtLeastEmployee(user);

		/**
		 * Remove a lead from crm
		 */
		public removeCRMLead: Lead * User==> ()
		removeCRMLead(lead, user) == crm.removeLead(lead)
		pre isAtLeastEmployee(user);

		/**
		 * Transforms a lead into a client
		 */
		public transformLeadIntoClient: Lead * User==> ()
		transformLeadIntoClient(lead, user) == 
		(
			dcl client: Client := new Client(lead.getName(), lead.getAge(), lead.getGender(), lead.getNationality());
			crm.removeLead(lead);
			addClient(client, user);
		)
		pre isAtLeastEmployee(user);
  
		public getReportOnClubStatistics: User ==> ()
		getReportOnClubStatistics(user) ==
		(
			dcl numClients: nat := card clients;
			dcl numTrainers: nat := card trainers;
			dcl numSalesRepresentatives: nat := card salesRepresentatives;
			dcl numClasses: nat := card classes;
			dcl numTrainingSessiosn: nat := card trainingSessions;
			IO`println("********* CLUB STATISTICS *********");
			IO`println("Number of clients: " ^ [numClients]);
			IO`println("Number of trainers: " ^ [numTrainers]);
			IO`println("Number of sales representatives: " ^ [numSalesRepresentatives]);
			IO`println("Number of gym classes: " ^ [numClasses]);
			IO`println("Number of training sessions: " ^ [numTrainingSessiosn]);
			IO`println("");
			IO`println("************************************");
		)
		pre isAtLeastEmployee(user);
		
		public getClientActivity: String_ * User ==> ()
		getClientActivity(clientName, user) ==
		(
			let c in set getClients() be st c.getName() = clientName in c.getActivity();
		)
		pre isAtLeastEmployee(user) and exists c in set getClients() & c.getName() = clientName;

		-- EMPLOYEES

		public getEmployeeActivity: String_ * bool * User ==> ()
		getEmployeeActivity(employeeName, showAllTasks, user) ==
		(
			let e in set getEmployees() be st e.getName() = employeeName in e.getActivity(showAllTasks);
		)
		pre isAtLeastEmployee(user) and exists e in set getEmployees() & e.getName() = employeeName;
		
		public addTaskToEmployee: Employee * User * Task ==> ()
		addTaskToEmployee(employee, user, task) == employee.addTask(task) 
		pre employee in set getEmployees() and isOwner(user);	

		-- PRODUCTS

		public addProduct: Product * nat ==> ()
		addProduct(prod, qtt) == 
		(
			prod.addQuantity(qtt);
			products := products union {prod};
		)
		pre prod not in set products;

		public removeProduct: Product ==> ()
		removeProduct(prod) == 
		(
			prod.removeQuantity(prod.getQuantity());
			products := products \ {prod};
		)
		pre products <> {} and prod in set products;
		
		-- GETTERS
		
		/**
		 * Gets the club name
		 * 
		 * @return name
		 */
		public pure getName : () ==> String_
		getName() == return name
		post RESULT = name;
				
		/**
		 * Gets the club newsletter
		 * 
		 * @return newsletter
		 */
		public pure getNewsletter : () ==> String1
		getNewsletter() == return newsletter
		post RESULT = newsletter;
		
		/**
		 * Gets the club owner
		 * 
		 * @return clubOwner
		 */
		public pure getOwner : () ==> User
		getOwner() == return clubOwner
		post RESULT = clubOwner;
		
		/**
		 * Gets the club clients
		 * 
		 * @return set of Client
		 */
		public pure getClients : () ==> set of Client
		getClients() == return clients
		post RESULT = clients;
		
		/**
		 * Gets the club trainers
		 * 
		 * @return set of Trainer
		 */
		public pure getTrainers : () ==> set of Trainer
		getTrainers() == return trainers
		post RESULT = trainers;
		
		/**
		 * Gets the club sales representatives
		 * 
		 * @return set of SalesRepresentative
		 */
		public pure getSalesRepresentatives : () ==> set of SalesRepresentative
		getSalesRepresentatives() == return salesRepresentatives
		post RESULT = salesRepresentatives;
		
		/**
		 * Gets the club employees (trainers + salesRepresentatives)
		 * 
		 * @return set of User
		 */
		public pure getEmployees : () ==> set of Employee
		getEmployees() == return trainers union salesRepresentatives
		post RESULT = trainers union salesRepresentatives;
		
		/**
		 * Gets the club users (clients + trainers + salesRepresentatives)
		 * 
		 * @return set of User
		 */
		public pure getUsers : () ==> set of User
		getUsers() == return clients union trainers union salesRepresentatives
		post RESULT = clients union trainers union salesRepresentatives;

		/**
		 * Gets client by name
		 * 
		 * @return Client
		 */
		public pure getClientByName : String_ ==> Client
		getClientByName(clientName) == 
			let c in set getClients() be st c.getName() = clientName in return c
		post exists c in set getClients() & c.getName() = clientName;
		
		/**
		 * Gets employee by name
		 * 
		 * @return Employee
		 */
		public pure getEmployeeByName : String_ ==> Employee
		getEmployeeByName(employeeName) == 
			let e in set getEmployees() be st e.getName() = employeeName in return e
		post exists e in set getEmployees() & e.getName() = employeeName;

		/**
		 * Gets user by name
		 * 
		 * @return User
		 */
		public pure getUserByName : String_ ==> User
		getUserByName(userName) == 
			let u in set getUsers() be st u.getName() = userName in return u
		post exists u in set getUsers() & u.getName() = userName;

		/**
		 * Gets the club classes
		 * 
		 * @return set of GymClass
		 */
		public pure getGymClasses : () ==> set of GymClass
		getGymClasses() == return classes
		post RESULT = classes;

		/**
		 * Gets the club training sessions
		 * 
		 * @return set of TrainingSession
		 */
		public pure getTrainingSessions : () ==> set of TrainingSession
		getTrainingSessions() == return trainingSessions
		post RESULT = trainingSessions;
		
		/**
		 * Gets the club groups
		 * 
		 * @return map String1 to Group
		 */
		public pure getGroups : () ==> map String1 to Group
		getGroups() == return groups
		post RESULT = groups;
		
		/**
		 * Gets a club group by name
		 * 
		 * @return Group
		 */
		public pure getGroupByName : String1 ==> Group
		getGroupByName(groupName) == return groups(groupName)
		post RESULT = groups(groupName);

		/**
		 * Gets the club fee
		 * 
		 * @return fee
		 */
		public pure getFee : () ==> rat
		getFee() == return fee
		post RESULT = fee;

		/**
		 * Gets the club invoices
		 * 
		 * @return set of Invoice
		 */
		public pure getInvoices : () ==> set of Invoice
		getInvoices() == return invoices
		post RESULT = invoices;

		/**
		 * Gets the club crm
		 * 
		 * @return CRM
		 */
		public pure getCRM : () ==> CRM
		getCRM() == return crm
		post RESULT = crm;

		/**
		 * Gets one of clubs employees calendar
		 * 
		 * @return map Date to seq of Task
		 */
		public pure getEmployeeCalendar: String_ ==> map Date to seq of Task
		getEmployeeCalendar(employeeName) ==
			return getEmployeeByName(employeeName).getCalendar().getTasks()
		post RESULT = getEmployeeByName(employeeName).getCalendar().getTasks();


		/**
		 * Gets one of clubs employees tasks for a given day
		 * 
		 * @return seq of Task
		 */
		public getEmployeeTasksForGivenDate: String_ * Date ==> seq of Task
		getEmployeeTasksForGivenDate(employeeName, date) == 
			return getEmployeeByName(employeeName).getCalendar().getTasksForGivenDate(date)
		post RESULT = getEmployeeByName(employeeName).getCalendar().getTasksForGivenDate(date);
 
 functions
 	
 	public static isAtLeastEmployee(user: User) res:bool ==
		user.getAccess() = <Owner> or user.getAccess() = <Employee>;
		
	public static isOwner(user: User) res:bool ==
		user.getAccess() = <Owner>;
end Club