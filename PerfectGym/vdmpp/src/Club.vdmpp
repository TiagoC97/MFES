class Club
types

	public String = seq of char;
	public String1 = seq1 of char;
	
values
-- TODO Define values here
instance variables

	private name: String:= "";
	private newsletter: String1 := "";

	private clients: set of Client := {};
	private salesRepresentatives: set of SalesRepresentative := {};
	private trainers: set of Trainer := {};
	private groups: map String1 to Group := {|->};
	
	private crm: [CRM];
	private clubOwner: [Owner];
	
operations

	-- constructor
 	public Club: String * Owner ==> Club
 	Club(newName, owner) == 
	(
 		name := newName;
 		clubOwner := owner;
 		clubOwner.setClub(self);
 		crm := new CRM();
 		return self
	)
 	post 
 		name = newName and
 		newsletter = "" and
 		clients = {} and
 		salesRepresentatives = {} and
 		trainers = {} and
 		groups = {|->} and
 		crm <> nil and
 		clubOwner = owner;
 	
 		-- add a new client to the club
		public addClient: Client ==> ()
		addClient(client) == 
		|| (clients := clients union {client}, PerfectGym`getInstance().addUser(client), client.setClub(self))
		pre client not in set clients
		post clients = clients~ union {client};
		
		-- add a new trainer to the club
		public addTrainer: Trainer ==> ()
		addTrainer(trainer) == 
		|| (trainers := trainers union {trainer}, PerfectGym`getInstance().addUser(trainer), trainer.setClub(self))
		pre trainer not in set trainers
		post trainers = trainers~ union {trainer};
		
		-- add a new sales representative to the club
		public addSalesRepresentative: SalesRepresentative ==> ()
		addSalesRepresentative(salesRepresentative) == 
		|| (salesRepresentatives := salesRepresentatives union {salesRepresentative}, PerfectGym`getInstance().addUser(salesRepresentative), salesRepresentative.setClub(self))
		pre salesRepresentative not in set salesRepresentatives
		post salesRepresentatives = salesRepresentatives~ union {salesRepresentative};
		
		-- add a new group to the club
		public addGroup: String1 * Group ==> ()
		addGroup(newName, newGroup) == 
				groups := groups munion {newName |-> newGroup}
		pre newName not in set dom groups
		post groups = groups~ munion {newName |-> newGroup};
		
		-- add a new group, by giving its name and its first client, to the club
		public addEmptyGroupByName: String1 * Client ==> ()
		addEmptyGroupByName(newName, client) == 
				groups := groups munion {newName |-> new Group(client, self)}
		pre newName not in set dom groups and client in set clients
		post groups = groups~ munion {newName |-> groups(newName)}; -- VERIFICAR SE ISTO É VÁLIDO!!!
		
		-- add a client of personal training to a trainer
		public addPersonalTraining: Trainer * Client ==> ()
		addPersonalTraining(trainer, client) ==
		|| (trainer.addTrainee(client), client.addTrainer(trainer))
		pre 
			-- trainer exists in the database			
			trainer in set trainers and
			-- client exists in the database
			client in set clients and
			-- client is not in the tariner trainees
			client not in set trainer.getTrainees();
			
		-- add newsletter to the club
		public addNewsletter: String1 ==> ()
		addNewsletter(message) == newsletter := message
		pre len newsletter > 0
		post newsletter = message;
		
		-- send message to a client
		public sendMessageClient: String1 * Client ==> ()
		sendMessageClient(msg, client) == 
		(
			client.receiveMessage(msg);
			client.receiveMessage(newsletter);
		)
		pre client in set clients and len msg > 0;
		
		-- send message to an employee
		public sendMessageEmployee: String1 * Employee ==> ()
		sendMessageEmployee(msg, employee) == employee.receiveMessage(msg)
		pre (employee in set trainers or employee in set salesRepresentatives) and len msg > 0;
		
			
		-- send message to all clients
		public sendMessageAllClients: String1 ==> ()
		sendMessageAllClients(msg) == 
		(
			for all client in set clients do
			(
				client.receiveMessage(msg);
				client.receiveMessage(newsletter);
			)
		)
		pre card clients > 0 and len msg > 0;
				
		-- send message to all trainers
		public sendMessageAllTrainers: String1 ==> ()
		sendMessageAllTrainers(msg) == 
		(
			for all trainer in set trainers do
				trainer.receiveMessage(msg)		
		)
		pre card trainers > 0 and len msg > 0;
		
		-- send message to all sales representatives
		public sendMessageAllSalesRepresentatives: String1 ==> ()
		sendMessageAllSalesRepresentatives(msg) == 
		(
			for all salesRepresentative in set salesRepresentatives do
				salesRepresentative.receiveMessage(msg)		
		)
		pre card salesRepresentatives > 0 and len msg > 0;
		
		public sendMessageToGroup: String * String1 * User ==> ()
		sendMessageToGroup(msg, groupName, user) == groups(groupName).sendMessage(user, msg)
		pre user in set clients or user = clubOwner;
		
		public sendOfferToGroup : String * String1 ==> ()
		sendOfferToGroup(offer, groupName) == groups(groupName).sendOffer(offer);
		
		-- Returns club name
		public pure getName : () ==> String
		getName() == return name;
		
		-- Returns club owner
		public pure getOwner : () ==> User
		getOwner() == return clubOwner;
		
		-- Returns club clients
		public pure getClients : () ==> set of Client
		getClients() == return clients;
		
		-- Returns club groups
		public pure getGroups : () ==> map String1 to Group
		getGroups() == return groups;
		
		-- Returns club group by name
		public pure getGroupByName : String1 ==> Group
		getGroupByName(groupName) == return groups(groupName);
 	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Club