class User
types
	public String_ = seq of char;
	public String1 = seq1 of char;
	public Access = <Owner> | <Employee> | <Client>;
	public Date = DateAndHour`Date;
	public Hour = DateAndHour`Hour;
	
-- TODO Define values here
instance variables
	protected name: String_;
	public static curUserID : int := 0;
	protected id : int := curUserID;
	protected inbox: map String1 to seq of String1 := {|->};
	protected club: [Club];
	protected access: Access;
	
operations

	public User: String_ * Access ==> User
 	User(newName, acc) == (
 		club := nil;
 		name := newName;
 		curUserID := curUserID +1;
 		access := acc; 
 		return self
 	)
	pre newName <> ""
 	post name = newName and
 			 id = curUserID~ and
 			 access = acc and
			 curUserID = curUserID~ + 1;
 	
 	public setClub: Club ==> ()
 	setClub(newClub) == club:= newClub
 	post club = newClub;

	public sendMessage: User * String1 ==> ()
	sendMessage(receiver, msg) == receiver.receiveMessage(msg, self)
	pre receiver in set club.getUsers(); 
 	
 	-- puts the new message on the top of the inbox
 	public receiveMessage: String1 * User ==> ()
	receiveMessage(msg, user) == 
	(
 		
 		if user.getName() not in set dom inbox then
 			inbox := {user.getName() |-> [msg]} munion inbox
 		else
 		(
 			dcl curMessagesFromUser: seq of String1 := inbox(user.getName());
 			inbox := {user.getName() |-> [msg] ^ curMessagesFromUser} munion inbox;
 		)
 	)
 	pre user in set club.getUsers();
 	
 	-- read last message from a given user
	public readMessagesFromUser: User ==> seq of String1
	readMessagesFromUser(user) == return inbox(user.getName())
	pre user.getName() in set dom inbox and user in set club.getUsers()
	post RESULT = inbox(user.getName());
	
	-- read last message from a given user
	public readLastMessageFromUser: User ==> String1
	readLastMessageFromUser(user) == return hd inbox(user.getName())
	pre user.getName() in set dom inbox and user in set club.getUsers()
	post RESULT = hd inbox(user.getName());
	
	-- delete last message from a given user
	public deleteLastMessageFromUser: User ==> ()
	deleteLastMessageFromUser(user) == inbox(user.getName()):= tl inbox(user.getName())
	pre user.getName() in set dom inbox and user in set club.getUsers()
	post inbox(user.getName()) = tl inbox(user.getName());

	-- read an n message from a given user
	public readMessageNFromUser: nat * User ==> String1
	readMessageNFromUser(n, user) == return inbox(user.getName())(n)
	pre inbox(user.getName()) <> [] and n in set inds inbox(user.getName()) and user in set club.getUsers()
	post RESULT = inbox(user.getName())(n);
	
	-- delete an n message from a given user
	public deleteMessageNFromUser: nat * User ==> ()
	deleteMessageNFromUser(n, user) == inbox(user.getName()) := inbox(user.getName())(1,..., n - 1) ^ inbox(user.getName())((n + 1),..., (len inbox(user.getName()))) 
	pre inbox(user.getName()) <> [] and n in set inds inbox(user.getName()) and user in set club.getUsers()
	post inbox(user.getName()) = inbox(user.getName())(1,..., n - 1) ^ inbox(user.getName())((n + 1),..., (len inbox(user.getName())));  -- CHECK THIS POST
	

 	-- check the inbox
 	public checkInbox: () ==> map String1 to seq of String1
 	checkInbox() == return inbox; 	
 	

		
		public setAccess: Access ==> ()
		setAccess(newAccess) == access := newAccess;
		
		public getActivity: () ==> ()
		getActivity() == skip;
		
		-- Returns user name
		public pure getName : () ==> String_
		getName() == return name;
		
		-- Returns user id
		public pure getId : () ==> int
		getId() == return id;
 	
 		-- Returns user access to the club
		public pure getAccess : () ==> Access
		getAccess() == return access;
 	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User