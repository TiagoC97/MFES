class Trainer is subclass of Employee
types
	public String_ = seq of char;
values
-- TODO Define values here
instance variables	
	private trainees: set of Client := {};
	private classes: set of GymClass := {};
	private trainingSessions: set of TrainingSession := {};

operations

	public Trainer: String_ * nat * Gender * String1  ==> Trainer
 	Trainer(newName, newAge, newGender, newNationality) == Employee(newName, newAge, newGender, newNationality)
 	post trainees = {} and classes = {} and trainingSessions = {};

	public addTrainee: Client ==> ()
	addTrainee(client) == trainees := trainees union {client}
	pre client not in set trainees
	post trainees = trainees~ union {client};

	 -- GYM CLASSES
	
	public addGymClass: GymClass ==> ()
	addGymClass(gymClass) == classes := classes union {gymClass}
	pre gymClass not in set classes
	post classes = classes~ union {gymClass};

	-- TRAINING SESSIONS
	
	public addTrainingSession: TrainingSession ==> ()
	addTrainingSession(trainingSession) == trainingSessions := trainingSessions union {trainingSession}
	pre trainingSession not in set trainingSessions
	post trainingSessions = trainingSessions~ union {trainingSession};
	
	-- GETTERS
	
	/**
	 * Get trainer activity
	 */

	 public getActivity: bool ==> ()
		getActivity(showAllTasks) ==
		(
			dcl numClasses: nat := card classes;
			dcl numTrainingSessiosn: nat := card trainingSessions;
			dcl tasks: map Date to seq of Task := calendar.getTasks();
			dcl i: nat := 0;
			dcl t: Task;

			IO`println("********* CLIENT STATISTICS *********");
			IO`println("Number of gym classes: " ^ [numClasses]);
			IO`println("Number of training sessions: " ^ [numTrainingSessiosn]);
			
			if showAllTasks then
				(
					for all d in set dom tasks do
					(
						i := 0;
						IO`println(d);	

						while i < len tasks(d) do
						( 
							t := tasks(d)(i); 
							IO`println("	Task: " ^ [t.getDescription()] ^ [" started at "] ^ [t.getStartHour()] ^ [" and ended at "] ^ [t.getEndHour()]);
							i:= i + 1;
						);
						IO`println("");
					)		
				);
			
			IO`println("");
			IO`println("************************************");
		);

	/**
	 * Gets the trainer trainees
	 * 
	 * @return set of Client
	 */
	public pure getTrainees : () ==> set of Client
	getTrainees() == return trainees
	post RESULT = trainees;

	/**
	 * Gets the trainer classes
	 * 
	 * @return set of GymClass
	 */
	public pure getClasses: () ==> set of GymClass
	getClasses() == return classes
	post RESULT = classes;

	/**
	 * Gets the trainer training sessions
	 * 
	 * @return set of TrainingSession
	 */
	public pure getTrainingSessions: () ==> set of TrainingSession
	getTrainingSessions() == return trainingSessions
	post RESULT = trainingSessions;

		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Trainer