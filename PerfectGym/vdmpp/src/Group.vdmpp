class Group
types
	public String1 = seq1 of char;
instance variables
	private clients: set of Client:= {};
 	private groupInbox: map String1 to seq of String1 := {|->};
 	private offers: seq of String1 := [];
	private club: [Club];

	-- There must be always (at least) one client in the group
	inv card clients >= 1;
	
operations

	/**
	 * Group constructor
	 */
 	public Group: Client * Club  ==> Group
 	Group(client, newClub) == 
	(
 		clients := {client};
 		club := newClub;
 		return self
 	)
 	pre client in set club.getClients()
 	post clients = {client} and groupInbox = {|->} and offers = [] and club = newClub;

	 /**
	  * Add a new client to the group
	  */
 	public addClient: Client ==> ()
 	addClient(client) == clients := clients union {client}
 	pre client not in set clients
 	post clients = clients~ union {client};

	/**
	 * Remove a client from the group
	 */
 	public removeClient: Client ==> ()
 	removeClient(client) == clients := clients \ {client}
 	pre card clients > 1 and client in set clients
 	post clients = clients~ \ {client};

	/**
	 * Add a new offer for the group
	 */
 	public sendOffer: String1 ==> ()
 	sendOffer(offer) == offers := [offer] ^ offers
 	post offers = [offer] ^ offers~;

	/**
	 * Add a new message, from a given user, to the group inbox
	 */
 	public sendMessage: User * String1 ==> ()
 	sendMessage(user, msg) == 
 	(
 		if user.getName() not in set dom groupInbox then
 			groupInbox := {user.getName() |-> [msg]} munion groupInbox
 		else
 			groupInbox(user.getName()) := groupInbox(user.getName()) ^ [msg];
 	)
	pre user in set clients or user.getAccess() = <Owner>;
	 
	 -- GETTERS
	 
	/**
	 * Check the inbox (the client must belong to the group)
	 * 
	 * @return groupInbox
	 */
 	public pure checkInbox: Client ==> map String1 to seq of String1
 	checkInbox(client) == return groupInbox
	pre client in set clients
	post RESULT = groupInbox;
 	
 	/**
	  * Get group last message sent by a given user
	  * 
	  * @return hd groupInbox(senderName)
	  */
 	public pure getLastMessageFromUser: String1 * Client ==> String1
 	getLastMessageFromUser(senderName, client) == return hd groupInbox(senderName)
 	pre senderName in set dom groupInbox and client in set clients;

	-- get group messages sent by a given user
 	public pure getMessagesFromUser: String1 * Client ==> seq of String1
 	getMessagesFromUser(senderName, client) == return groupInbox(senderName)
 	pre senderName in set dom groupInbox and client in set clients;
	

 	 -- check the offers the group received (the client must belong to the group)
 	public pure checkOffers: Client ==> seq of String1
 	checkOffers(client) == return offers
 	pre client in set clients;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Group
