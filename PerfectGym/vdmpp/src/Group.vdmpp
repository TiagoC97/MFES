class Group
types
	public String1 = seq1 of char;
instance variables
	private clients: set of Client:= {};
 	private groupInbox: map String1 to seq of String1 := {|->};
 	private offers: seq of String1 := [];

	inv card clients >= 1;

operations

	/**
	 * Group constructor
	 */
 	public Group: set of Client  ==> Group
 	Group(newClients) ==
	(
 		clients := newClients;
 		return self
 	)
 	post clients = newClients and groupInbox = {|->} and offers = [];

	 /**
	  * Add a new client to the group
	  */
 	public addClient: Client ==> ()
 	addClient(client) == clients := clients union {client}
 	pre client not in set clients
 	post clients = clients~ union {client};

	/**
	 * Remove a client from the group
	 */
 	public removeClient: Client ==> ()
 	removeClient(client) == clients := clients \ {client}
 	pre card clients > 1 and client in set clients
 	post clients = clients~ \ {client};

	/**
	 * Add a new offer for the group
	 */
 	public sendOffer: String1 ==> ()
 	sendOffer(offer) == offers := [offer] ^ offers
 	post offers = [offer] ^ offers~;

	/**
	 * Add a new message, from a given user, to the group inbox
	 */
 	public sendMessage: User * String1 ==> ()
 	sendMessage(user, msg) ==
 	(
 		if user.getName() not in set dom groupInbox then
 			groupInbox := {user.getName() |-> [msg]} munion groupInbox
 		else
 			groupInbox(user.getName()) := groupInbox(user.getName()) ^ [msg];
 	)
	pre user in set clients or user.getAccess() = <Owner>;

	 -- GETTERS

	/**
	 * Gets the inbox (the client must belong to the group)
	 *
	 * @return groupInbox
	 */
 	public pure checkInbox: Client ==> map String1 to seq of String1
 	checkInbox(client) == return groupInbox
	pre client in set clients
	post RESULT = groupInbox;

 	/**
	  * Get group last message sent by a given user
	  *
	  * @return String1
	  */
 	public pure getLastMessageFromUser: String1 * Client ==> String1
 	getLastMessageFromUser(senderName, client) == return hd groupInbox(senderName)
	 pre senderName in set dom groupInbox and client in set clients
	 post RESULT = hd groupInbox(senderName);

	 /**
	  * Get group messages sent by a given user
	  *
	  * @return seq of String1
	  */
 	public pure getMessagesFromUser: String1 * Client ==> seq of String1
 	getMessagesFromUser(senderName, client) == return groupInbox(senderName)
	 pre senderName in set dom groupInbox and client in set clients
	 post RESULT = groupInbox(senderName);

 	/**
	 * Gets the group offers
	 *
	 * @return offers
	 */
 	public pure checkOffers: Client ==> seq of String1
 	checkOffers(client) == return offers
	pre client in set clients
	post RESULT = offers;

	/**
	 * Gets the group clients
	 *
	 * @return clients
	 */
 	public pure getClients: () ==> set of Client
 	getClients() == return clients
	post RESULT = clients;

end Group
