class SalesRepresentative is subclass of Employee
types
	
values
	
instance variables
	private leads: set of Lead := {};
operations
	public SalesRepresentative: String_ * nat * Gender * String1 ==> SalesRepresentative
 	SalesRepresentative(newName, newAge, newGender, newNationality) == Employee(newName, newAge, newGender, newNationality)
 	post leads = {};
 	
 	public addLead: Lead ==> ()
 	addLead(lead) == leads := leads union {lead}
 	pre lead not in set leads
 	post leads= leads~ union {lead};
 	
 	public removeLead: Lead ==> ()
 	removeLead(lead) == leads := leads \ {lead}
 	pre lead in set leads
 	post leads= leads~ \ {lead};

	-- GETTERS

/**
	 * Get sales representative activity
	 */

	 public getActivity: bool ==> ()
		getActivity(showAllTasks) ==
		(
			dcl numLeads: nat := card leads;
			dcl tasks: map Date to seq of Task := calendar.getTasks();
			dcl i: nat := 0;
			dcl t: Task;

			IO`println("********* CLIENT STATISTICS *********");
			IO`println("Number of leads: " ^ [numLeads]);
			
			if showAllTasks then
				(
					for all d in set dom tasks do
					(
						i := 0;
						IO`println("Date: " ^ [d]);	

						while i < len tasks(d) do
						( 
							t := tasks(d)(i); 
							IO`println("	Task: " ^ [t.getDescription()] ^ [" started at "] ^ [t.getStartHour()] ^ [" and ended at "] ^ [t.getEndHour()]);
							i:= i + 1;
						);
						IO`println("");
					)		
				);
			
			IO`println("");
			IO`println("************************************");
		);
		
    /**
	 * Gets the SalesRepresentative leads
	 * 
	 * @return set of Lead
	 */
	public pure getLeads: () ==> set of Lead
 	getLeads() == return leads
 	post RESULT = leads;

end SalesRepresentative