class ClubTest is subclass of MyTestCase

instance variables

  	owner1: Owner := new Owner("Rui", 21, <Male>, "portuguese");

	club1: Club := new Club("Bombados", owner1, 17);

	client1: Client := new Client("Maria", 23, <Female>, "portuguese");
	client2: Client := new Client("Jorge", 25, <Male>, "spanish");

	trainer1: Trainer := new Trainer("Vasco", 25, <Male>, "brazilian");
	trainer2: Trainer := new Trainer("Alex", 33, <Male>, "english");

	salesRepresentative1: SalesRepresentative := new SalesRepresentative("Joana", 21, <Female>, "portuguese");
	salesRepresentative2: SalesRepresentative := new SalesRepresentative("Manuel", 33, <Male>, "french");

	gymClass1: GymClass := new GymClass("Aula de baixa intensidade", "Pilates", trainer1, <Tuesday>, 
		Utils`CreateHour(09, 00), 
		Utils`CreateHour(10, 00), 
		Utils`CreateDate(2019, 01, 11));

	lead1: Lead := new Lead("Maria", 23, <Female>, "portuguese");
	lead2: Lead := new Lead("Jorge", 25, <Male>, "spanish");

	crm: CRM := new CRM();
	
	
operations
	public Run: () ==> ()
	Run() == (
		IO`println("\nClub Tests");

		club1.addClient(client1, owner1);
		club1.addClient(client2, owner1);

		club1.addTrainer(trainer1, owner1);
		club1.addTrainer(trainer2, owner1);

		club1.addSalesRepresentative(salesRepresentative1, owner1);
		club1.addSalesRepresentative(salesRepresentative2, owner1);

		club1.addGroup("PuxadoresDeFerro", {client1}, owner1);

		club1.addPersonalTraining(trainer1, client1, 40, owner1);
		club1.removeTraineeFromTrainer(trainer1, client1, owner1);
		
		club1.addGymClass(gymClass1, owner1);

		club1.addGymClass("Aula de alta intensidade", "Zumba", trainer1, <Monday>, 
		Utils`CreateHour(16, 00), 
	  	Utils`CreateHour(17, 00), 
	  	Utils`CreateDate(2019, 01, 14), owner1);
		  IO`println("Finalizing GymClass1");
		club1.addGymClass("Aula de baixa intensidade", "Pilates", trainer2, <Tuesday>, 
		Utils`CreateHour(09, 00), 
	  	Utils`CreateHour(10, 00), 
	  	Utils`CreateDate(2019, 01, 15), owner1);
		  IO`println("Finalizing GymClass2");

		club1.addAttendeeToGymClass(gymClass1, client1, owner1);
		club1.addAttendeeToGymClass(gymClass1, client2, owner1);
		
		club1.addTrainingSession("Aula iniciante", client1, <Monday>, 
		Utils`CreateHour(14, 00), 
	  	Utils`CreateHour(15, 00), 
	  	Utils`CreateDate(2019, 01, 14), owner1);
		  IO`println("Finalizing TrainingSession1");
		club1.addTrainingSession("Aula de treino instenso de abdominais", client2, <Tuesday>, 
		Utils`CreateHour(17, 00), 
	  	Utils`CreateHour(18, 00), 
	  	Utils`CreateDate(2019, 01, 15), owner1);
		  IO`println("Finalizing TrainingSession2");

		club1.setUserAccess(owner1, trainer1, <Owner>);

		IO`println("Initiate addNewsletter");
		club1.addNewsletter("Sales", owner1);

		IO`println("Initiate sendMessageClient");
		club1.sendMessageClient("Bom Ano", client1, owner1);

		IO`println("Initiate sendMessageEmployee");
		club1.sendMessageEmployee("Tas despedido bro!", trainer1, owner1);

		IO`println("Initiate sendMessageAllClients");
		club1.sendMessageAllClients("Feliz Natal", owner1);
		IO`println("Initiate sendMessageAllTrainers");
		club1.sendMessageAllTrainers("Feliz Natal", owner1);
		IO`println("Initiate sendMessageAllSalesRepresentatives");
		club1.sendMessageAllSalesRepresentatives("Feliz Natal", owner1);

		IO`println("Initiate sendMessageToGroup");
		club1.sendMessageToGroup("Feliz Natal", "PuxadoresDeFerro", owner1);
		club1.sendOfferToGroup("Prota com 10% de desconto esta semana!! :O", "PuxadoresDeFerro", owner1);

		IO`println("Initiate AddGroupClient");
		club1.addGroupClient("PuxadoresDeFerro", client2, owner1);
		club1.removeGroupClient("PuxadoresDeFerro", client2, owner1);

		IO`println("Initiate Invoice");
		--club1.addInvoice(client1, {} );
		--club1.addInvoiceWithAllActivePayments();
		--club1.addPaymentToInvoice();
		--club1.removePaymentFromInvoice();

		IO`println("Initiate CRM");
		-- club1.addLeadToCRM(lead1, owner1);
		-- club1.addLeadSRToCRM(lead2, salesRepresentative2, owner1);
		-- club1.setCRMLeadSR(lead1, salesRepresentative1, owner1);

		-- assertEqual({lead1 |-> salesRepresentative1}, crm.getLeads());
		-- assertEqual(salesRepresentative1, crm.getLeadSR(lead1));

		-- club1.removeLeadSR(lead1, salesRepresentative1, owner1);
		-- club1.removeCRMLead(lead1, owner1);

		-- club1.transformLeadIntoClient(lead2, owner1);

		IO`println("Initiate Getters");
		assertEqual({client1, client2}, club1.getClients());
		assertEqual({trainer1.getID(), trainer2.getID()}, club1.getTrainers());
		assertEqual({salesRepresentative1, salesRepresentative2}, club1.getSalesRepresentatives());
			
		assertEqual(owner1, club1.getOwner());
		assertEqual("Bombados", club1.getName());
		
		assertEqual(club1, owner1.getClub());

		IO`println("Initiate Stats");
		club1.getReportOnClubStatistics(owner1);
		club1.getClientActivity(client1, owner1);

		IO`println("Finalizing Club Tests");
	);
	
end ClubTest